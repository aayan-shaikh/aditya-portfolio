---
interface Props {
    images: string[];
    title?: string;
}

const { images, title = "Retouching Portfolio" } = Astro.props;
---

<section class="photo-gallery">
    <div class="gallery-header">
        <h2>{title}</h2>
        <p>5+ Years of Professional Retouching Experience</p>
    </div>

    <div class="progress-container" id="progress-container">
        <div class="progress-bar">
            <div class="progress-fill" id="progress-fill"></div>
        </div>
        <p class="progress-text" id="progress-text">Loading images...</p>
    </div>

    <div class="gallery-grid" id="gallery-grid">
        {
            images.map((image, index) => (
                <div class="gallery-item" data-index={index}>
                    <img
                        src={image}
                        alt={`Aayan's Photography work ${index + 1}`}
                        loading={index < 6 ? "eager" : "lazy"}
                        class="gallery-image"
                    />
                    <div class="image-overlay">
                        <button class="view-btn" data-image={image}>
                            <svg
                                width="24"
                                height="24"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                            >
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" />
                                <circle cx="12" cy="12" r="3" />
                            </svg>
                            View
                        </button>
                    </div>
                </div>
            ))
        }
    </div>

    <div class="lightbox" id="lightbox">
        <div class="lightbox-content">
            <button class="close-btn" id="close-lightbox">close</button>
            <img src="" alt="" id="lightbox-image" />
            <div class="lightbox-nav">
                <button class="nav-btn prev-btn" id="prev-btn">prev</button>
                <button class="nav-btn next-btn" id="next-btn">next</button>
            </div>
        </div>
    </div>
</section>

<style>
    .photo-gallery {
        padding: 2rem 0;
        max-width: 1200px;
        margin: 0 auto;
    }

    .gallery-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .gallery-header h2 {
        font-size: 2.5rem;
        font-weight: 700;
        color: $text-primary !important;
        margin-bottom: 0.5rem;
    }

    .gallery-header p {
        font-size: 1.1rem;
        color: $text-secondary !important;
        font-style: italic;
    }

    .progress-container {
        text-align: center;
        margin-bottom: 2rem;
        transition: opacity 0.3s ease;
    }

    .progress-bar {
        width: 100%;
        max-width: 400px;
        height: 4px;
        background: #f0f0f0;
        border-radius: 2px;
        margin: 0 auto 1rem;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: #333;
        width: 0%;
        transition: width 0.3s ease;
    }

    .progress-text {
        font-size: 0.9rem;
        color: $text-secondary !important;
        margin: 0;
    }

    .gallery-grid {
        columns: 4;
        column-gap: 1.5rem;
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .gallery-grid.loaded {
        opacity: 1;
    }

    @media (max-width: 768px) {
        .gallery-grid {
            columns: 4;
            column-gap: 1rem;
        }
    }

    @media (max-width: 480px) {
        .gallery-grid {
            margin-inline: 0.5rem;
            columns: 3;
            column-gap: 0.5rem;
        }
    }

    .gallery-item {
        break-inside: avoid;
        margin-bottom: 1.5rem;
        display: inline-block;
        width: 100%;
        position: relative;
        overflow: hidden;
        cursor: pointer;
        border: 1px solid rgba(0, 0, 0, 0.3);
        transition: transform 0.3s ease;
    }

    .gallery-item:hover {
        transform: translateY(-2px) rotate(0.5deg);
    }

    .gallery-image {
        width: 100%;
        height: auto;
        display: block;
        transition: transform 0.3s ease;
    }

    .gallery-item:hover .gallery-image {
        transform: scale(1.05);
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .gallery-item:hover .image-overlay {
        opacity: 1;
    }

    .view-btn {
        font-family: monospace;
        background: transparent;
        border: none;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: white;
        letter-spacing: 0.9;
        svg {
            margin-right: 0.3rem;
        }
    }

    .lightbox {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .lightbox.active {
        opacity: 1;
        visibility: visible;
    }

    .lightbox-content {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 60px 80px;
        box-sizing: border-box;
    }

    .close-btn {
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(0, 0, 0, 0.7);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-family: monospace;
        font-size: 0.9rem;
        cursor: pointer;
        z-index: 1001;
        padding: 8px 12px;
    }

    #lightbox-image {
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
        display: block;
    }

    .lightbox-nav {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        pointer-events: none;
        z-index: 1002;
    }

    .nav-btn {
        background: rgba(0, 0, 0, 0.7);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-family: monospace;
        font-size: 0.8rem;
        padding: 12px 16px;
        cursor: pointer;
        pointer-events: all;
    }

    .prev-btn {
        margin-left: 20px;
    }
    .next-btn {
        margin-right: 20px;
    }
</style>

<script>
    class PhotoGallery {
        constructor() {
            this.images = [];
            this.currentIndex = 0;
            this.lightbox = document.getElementById("lightbox");
            this.lightboxImage = document.getElementById("lightbox-image");
            this.init();
        }

        init() {
            this.setupProgressTracking();
            this.setupLightbox();
        }

        setupProgressTracking() {
            const galleryGrid = document.getElementById("gallery-grid");
            const progressContainer =
                document.getElementById("progress-container");
            const progressFill = document.getElementById("progress-fill");
            const progressText = document.getElementById("progress-text");
            const images = document.querySelectorAll(".gallery-image");

            let loadedCount = 0;
            const totalImages = images.length;

            const updateProgress = () => {
                const percentage = (loadedCount / totalImages) * 100;
                progressFill.style.width = `${percentage}%`;
                progressText.textContent = `Loading images... ${loadedCount}/${totalImages}`;

                if (loadedCount === totalImages) {
                    setTimeout(() => {
                        progressContainer.style.opacity = "0";
                        galleryGrid.classList.add("loaded");
                        setTimeout(() => {
                            progressContainer.style.display = "none";
                        }, 300);
                    }, 500);
                }
            };

            images.forEach((img) => {
                if (img.complete && img.naturalWidth > 0) {
                    loadedCount++;
                } else {
                    img.onload = () => {
                        loadedCount++;
                        updateProgress();
                    };
                    img.onerror = () => {
                        loadedCount++;
                        updateProgress();
                    };
                }
            });

            updateProgress();
        }

        setupLightbox() {
            const galleryItems = document.querySelectorAll(".gallery-item");
            galleryItems.forEach((item, index) => {
                const img = item.querySelector(".gallery-image");
                this.images.push(img.src);
                item.addEventListener("click", () => this.openLightbox(index));
            });

            document
                .getElementById("close-lightbox")
                .addEventListener("click", () => this.closeLightbox());
            document
                .getElementById("prev-btn")
                .addEventListener("click", () => this.prevImage());
            document
                .getElementById("next-btn")
                .addEventListener("click", () => this.nextImage());

            document.addEventListener("keydown", (e) => {
                if (this.lightbox.classList.contains("active")) {
                    if (e.key === "Escape") this.closeLightbox();
                    if (e.key === "ArrowLeft") this.prevImage();
                    if (e.key === "ArrowRight") this.nextImage();
                }
            });

            // Enhanced overlay click handling
            this.lightbox.addEventListener("click", (e) => {
                // Close if clicking on lightbox background or lightbox-content
                if (
                    e.target === this.lightbox ||
                    e.target.classList.contains("lightbox-content")
                ) {
                    this.closeLightbox();
                }
            });

            // Prevent image clicks from bubbling up to close the lightbox
            this.lightboxImage.addEventListener("click", (e) => {
                e.stopPropagation();
            });
        }

        openLightbox(index) {
            this.currentIndex = index;
            this.lightboxImage.src = this.images[index];
            this.lightbox.classList.add("active");
            document.body.style.overflow = "hidden";
        }

        closeLightbox() {
            this.lightbox.classList.remove("active");
            document.body.style.overflow = "";
        }

        prevImage() {
            this.currentIndex =
                (this.currentIndex - 1 + this.images.length) %
                this.images.length;
            this.lightboxImage.src = this.images[this.currentIndex];
        }

        nextImage() {
            this.currentIndex = (this.currentIndex + 1) % this.images.length;
            this.lightboxImage.src = this.images[this.currentIndex];
        }
    }

    document.addEventListener("DOMContentLoaded", () => new PhotoGallery());
</script>
